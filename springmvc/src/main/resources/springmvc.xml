<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<!-- 解决web.xml中配置/拦截之后不能访问静态资源第二种方法 -->
	<mvc:default-servlet-handler/>
	
	<!-- 解决web.xml中配置/拦截之后不能访问静态资源的第三种方法 -->
	<!-- 
	<mvc:resources location="/images/" mapping="/images/**"/>
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/css/" mapping="/css/**"/>
	 -->
	 
	<!-- 注册视图解析器(视图解析器按照定义顺序选择执行，或者可以设置order属性，大于0的数字) -->
	<!-- 1、内部资源视图解析器InternalResourceViewResolver -->
	<!-- 
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	 -->
	 
	<!-- 2、BeanName资源视图解析器BeanNameViewResolver -->
	<!-- <bean id="" class="org.springframework.web.servlet.view.BeanNameViewResolver"/> -->
	<!-- 定义一个内部资源视图 -->
	<!-- 
	<bean id="internalResource" class="org.springframework.web.servlet.view.JstlView">
		<property name="url" value="/WEB-INF/jsp/welcome.jsp"/>
	</bean>
	 -->
	<!-- 定义一个外部资源视图 -->
	<!-- 
	<bean id="taobao" class="org.springframework.web.servlet.view.RedirectView">
		<property name="url" value="http://www.taobao.com"/>
	</bean>
	 -->
	 
	<!-- 3、Xml资源视图解析器XmlViewResolver -->
	<!-- 
	<bean class="org.springframework.web.servlet.view.XmlViewResolver">
		<property name="location" value="classpath:myViews.xml"/>
	</bean>
	 -->
	 
	<!-- 4、Properties资源视图解析器ResourceBundleViewResolver -->
	<!-- 
	<bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
		<property name="basename" value="myViews"/>
	</bean>
	 -->
	 
	<!-- 注册处理器 -->
	<!-- 
	这里要求浏览器必须提交如下绝对路径才能访问到MyController这个资源：
	这个路径出现在xml文件中，所以是后台路径，而后台路径的参照路径是：web应用的根路径。
	当前web应用的根路径是：http://localhost:8080/springmvc
	也就是说，现在要求的绝对路径是：参照路径 + 相对路径
	http://localhost:8080/springmvc/welcome.html
	 -->
	<!-- <bean id="/welcome.html" class="com.ietree.springmvc.firstdemo.MyController" /> -->
	
	<!-- 注册处理器 -->
	<bean id="myController" class="com.ietree.springmvc.firstdemo.MyController" />
	
	<!-- 注册处理器映射器 -->
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<!-- 
		<property name="mappings">
			<props>
				<prop key="/welcome.html">myController</prop>
				<prop key="/test.html">myController</prop>
			</props>
		</property>
		 -->
		<property name="urlMap">
			<map>
				<entry key="/welcome.html" value-ref="myController" />
				<entry key="/test.html" value-ref="myController" />
			</map>
		</property>
	</bean>
	
</beans>